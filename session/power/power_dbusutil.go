// Code generated by "dbusutil-gen -type Manager manager.go"; DO NOT EDIT.

package power

func (v *Manager) setPropScheduledShutdownState(value bool) (changed bool) {
	if v.ScheduledShutdownState != value {
		v.ScheduledShutdownState = value
		v.emitPropChangedScheduledShutdownState(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedScheduledShutdownState(value bool) error {
	return v.service.EmitPropertyChanged(v, "ScheduledShutdownState", value)
}

func (v *Manager) setPropShutdownTime(value string) (changed bool) {
	if v.ShutdownTime != value {
		v.ShutdownTime = value
		v.emitPropChangedShutdownTime(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedShutdownTime(value string) error {
	return v.service.EmitPropertyChanged(v, "ShutdownTime", value)
}

func (v *Manager) setPropShutdownRepetition(value int) (changed bool) {
	if v.ShutdownRepetition != value {
		v.ShutdownRepetition = value
		v.emitPropChangedShutdownRepetition(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedShutdownRepetition(value int) error {
	return v.service.EmitPropertyChanged(v, "ShutdownRepetition", value)
}

func (v *Manager) setPropCustomShutdownWeekDays(value []byte) (changed bool) {
	if !byteSliceEqual(v.CustomShutdownWeekDays, value) {
		v.CustomShutdownWeekDays = value
		v.emitPropChangedCustomShutdownWeekDays(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedCustomShutdownWeekDays(value []byte) error {
	return v.service.EmitPropertyChanged(v, "CustomShutdownWeekDays", value)
}

func (v *Manager) setPropLidIsPresent(value bool) (changed bool) {
	if v.LidIsPresent != value {
		v.LidIsPresent = value
		v.emitPropChangedLidIsPresent(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedLidIsPresent(value bool) error {
	return v.service.EmitPropertyChanged(v, "LidIsPresent", value)
}

func (v *Manager) setPropOnBattery(value bool) (changed bool) {
	if v.OnBattery != value {
		v.OnBattery = value
		v.emitPropChangedOnBattery(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedOnBattery(value bool) error {
	return v.service.EmitPropertyChanged(v, "OnBattery", value)
}

func (v *Manager) setPropUseWayland(value bool) (changed bool) {
	if v.UseWayland != value {
		v.UseWayland = value
		v.emitPropChangedUseWayland(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedUseWayland(value bool) error {
	return v.service.EmitPropertyChanged(v, "UseWayland", value)
}

func (v *Manager) setPropWarnLevel(value WarnLevel) (changed bool) {
	if v.WarnLevel != value {
		v.WarnLevel = value
		v.emitPropChangedWarnLevel(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedWarnLevel(value WarnLevel) error {
	return v.service.EmitPropertyChanged(v, "WarnLevel", value)
}

func (v *Manager) setPropHasAmbientLightSensor(value bool) (changed bool) {
	if v.HasAmbientLightSensor != value {
		v.HasAmbientLightSensor = value
		v.emitPropChangedHasAmbientLightSensor(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedHasAmbientLightSensor(value bool) error {
	return v.service.EmitPropertyChanged(v, "HasAmbientLightSensor", value)
}

func (v *Manager) setPropIsHighPerformanceSupported(value bool) (changed bool) {
	if v.IsHighPerformanceSupported != value {
		v.IsHighPerformanceSupported = value
		v.emitPropChangedIsHighPerformanceSupported(value)
		return true
	}
	return false
}

func (v *Manager) emitPropChangedIsHighPerformanceSupported(value bool) error {
	return v.service.EmitPropertyChanged(v, "IsHighPerformanceSupported", value)
}
